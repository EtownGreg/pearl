#!/usr/bin/env python

import argparse
import hashlib
import logging
import os
import os.path
import textwrap
import subprocess
import sys
from pathlib import Path

from pearllib.package import install_package
from pearllib.pearlenv import PearlEnvironment
from pearllib.utils import verify_runtime_deps

logger = logging.getLogger(__name__)
out_hdlr = logging.StreamHandler(sys.stdout)
out_hdlr.setFormatter(logging.Formatter('%(message)s'))
out_hdlr.setLevel(logging.INFO)
logger.addHandler(out_hdlr)
logger.setLevel(logging.INFO)


def parse_args():
    parser = create_main_parser()

    command_parsers = parser.add_subparsers(
        help='For command help: %(prog)s COMMAND --help',
        title='commands',
        dest='subparser_name'
    )

    create_install_parser(command_parsers)
    create_update_parser(command_parsers)
    create_remove_parser(command_parsers)
    create_emerge_parser(command_parsers)
    create_init_parser(command_parsers)
    create_search_parser(command_parsers)
    create_list_parser(command_parsers)

    args = parser.parse_args()
    return args


def create_main_parser():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent("""
        Pearl: Because only in the best shells you will find a Pearl...
        """))
    parser.add_argument(
        '-u', '--update-repos',
        action='store_true',
        help="update the repositories before doing any action"
    )
    parser.add_argument(
        # TODO think about a different name for -y
        '-y', '--yes',
        action='store_true',
        help=""
    )
    parser.add_argument(
        '-c', '--config-file', metavar='FILE', type=str,
        default=None,
        help="location of the pearl config path. Defaults to $HOME/.config/pearl/pearl.conf"
    )
    parser.add_argument('--verbose', '-v', action='count', default=0, help="increase output verbosity")
    parser.add_argument('--version', '-V', action='version', version='%(prog)s 2.0')
    return parser


def create_install_parser(command_parsers):
    install_parser = command_parsers.add_parser(
        'install',
        help='Install the packages'
    )
    install_parser.add_argument(
        'packages', metavar='[REPO/]PACKAGE', type=str, nargs='+'
    )


def create_update_parser(command_parsers):
    update_parser = command_parsers.add_parser(
        'update',
        help='Update Pearl or the packages if specified'
    )
    update_parser.add_argument(
        'packages', metavar='[REPO/]PACKAGE', type=str, nargs='*'
    )


def create_remove_parser(command_parsers):
    remove_parser = command_parsers.add_parser(
        'remove',
        help='Remove Pearl or the packages if specified'
    )
    remove_parser.add_argument(
        'packages', metavar='[repo/]package', type=str, nargs='*'
    )


def create_emerge_parser(command_parsers):
    emerge_parser = command_parsers.add_parser(
        'emerge',
        help='Update Pearl or install/update the packages if specified'
    )
    emerge_parser.add_argument(
        'packages', metavar='[repo/]package', type=str, nargs='*'
    )


def create_init_parser(command_parsers):
    command_parsers.add_parser(
        'init',
        help='Init ~/.config/pearl config directory'
    )


def create_search_parser(command_parsers):
    install_parser = command_parsers.add_parser(
        'search',
        help='Search the available Pearl packages that match pattern'
    )
    install_parser.add_argument(
        'pattern', metavar='PATTERN', type=str, nargs='+'
    )


def create_list_parser(command_parsers):
    command_parsers.add_parser(
        'list',
        help='List all the available Pearl packages'
    )


if __name__ == '__main__':
    verify_runtime_deps()

    args = parse_args()

    pearl_env = PearlEnvironment(
        config_filename=Path(args.config_file) if args.config_file is not None else None,
        update_repos=args.update_repos
    )

    if args.subparser_name == 'install':
        # TODO manage exceptions from install_package.
        for package in args.packages:
            install_package(pearl_env, package)
